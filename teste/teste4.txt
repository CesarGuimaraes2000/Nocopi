In object-oriented programming, inheritance is a programming technique used to create new classes (whose instances are called objects) based on classes that are already defined. The concept of inheritance was first introduced in 1967 with the Simula language. These new classes, known as subclasses or derived classes, receive (or inherit) the characteristics and behaviors of the existing classes, which are known as parent or base classes. Its main purpose is to enable the reuse of existing code with minimal or no changes. Inheritance supports the organization of information in programming languages through classification. Classification is a powerful method of processing information, fundamental to human learning through generalization (knowledge about specific entities can be applied to a larger group when a relationship of belonging exists) and cognitive efficiency (it is not necessary to store all information for each individual entity, only its distinctive details). Inheritance is sometimes referred to as generalization, because “is-a” relationships express a hierarchy among classes of objects. For example, a “tool” is a generalization of “hammer,” “screwdriver,” “wrench,” and others. One can think of a tool as an abstraction of hammer, screwdriver, etc. Likewise, since a hammer is a tool (i.e., a hammer is-a tool), it can naturally inherit all properties common to all tools, such as being used to perform work. A key benefit of inheritance is that modules with similar interfaces can share large amounts of code, simplifying the program’s structure. Inheritance also relates to another concept called polymorphism, which allows multiple sections of code to be managed through a shared control mechanism.
Inheritance is generally implemented by overriding (replacing) one or more methods provided by the parent class or by adding new methods to those already offered by the parent. However, complex inheritance, or its use in immature designs, can result in what is known as the Yo-yo problem.