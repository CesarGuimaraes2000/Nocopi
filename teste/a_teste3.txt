In object-oriented programming, inheritance is a method to create new classes (instances of which are known as objects) using classes that have already been defined. The idea of inheritance was introduced in 1967 for Simula. The new classes, called derived classes, acquire (or inherit) attributes and behaviors of the existing classes, which are referred to as base classes (or ancestor classes). It is designed to promote the reuse of existing code with little or no alteration. Inheritance provides the basis for representation through categorization in computer languages. Categorization is a powerful mechanism for information processing, vital to human learning by means of generalization (what is known about specific entities is applied to a broader group when a belongs relationship can be established) and cognitive economy (less information needs to be stored about each individual entity, only its unique characteristics). Inheritance is also sometimes referred to as generalization, because the is-a relationships represent a hierarchy between classes of objects. For example, an "instrument" is a generalization of "guitar", "piano", "drum" and many others. One can think of instrument as an abstraction of guitar, piano, etc. Conversely, since guitars are instruments (i.e., a guitar is-an instrument), guitars may naturally inherit all the properties common to all instruments, such as producing sound when played. An advantage of inheritance is that modules with sufficiently similar interfaces can share a great deal of code, reducing the complexity of the program. Inheritance therefore has another perspective, a dual, called polymorphism, which describes many pieces of code being managed by shared control logic.
Inheritance is typically achieved either by overriding (replacing) one or more methods provided by the ancestor, or by adding new methods to those provided by an ancestor. Complex inheritance, or inheritance used within a design that is not sufficiently mature, may lead to the Yo-yo problem.