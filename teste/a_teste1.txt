In object-oriented programming, inheritance is a method to create new classes (instances of which are called objects) using classes that have already been defined. The inheritance concept was introduced in 1967 for Simula. The new classes, known as derived classes, acquire (or inherit) attributes and behaviors of the existing classes, which are referred to as base classes (or ancestor classes). It is designed to help reuse existing code with little or no alteration. Inheritance provides the foundation for representation by categorization in computer languages. Categorization is a powerful mechanism for information processing, essential to human learning through generalization (what is known about specific entities is applied to a broader group when a belongs relation can be established) and cognitive economy (less information needs to be stored about each individual entity, only its particular details). Inheritance is also sometimes called generalization, because the is-a relationships represent a hierarchy between classes of objects. For example, a "fruit" is a generalization of "apple", "orange", "mango" and many others. One can view fruit as an abstraction of apple, orange, etc. Conversely, since apples are fruit (i.e., an apple is-a fruit), apples may naturally inherit all the characteristics common to all fruit, such as being a fleshy container for the seed of a plant. An advantage of inheritance is that modules with sufficiently similar interfaces can share a lot of code, reducing the complexity of the program. Inheritance therefore has another perspective, a dual, called polymorphism, which describes many pieces of code being controlled by shared control code.
Inheritance is typically achieved either by overriding (replacing) one or more methods provided by the ancestor, or by adding new methods to those provided by an ancestor. Complex inheritance, or inheritance used within a design that is not sufficiently mature, may lead to the Yo-yo problem.